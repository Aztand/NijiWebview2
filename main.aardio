import win.ui;
import web.view;
import web.rest.jsonLiteClient;
import web.json;
import wsock.tcp.asynHttpServer;
import console;
import string.chineseNumber;
import fsys;
import fsys.version;
import fsys.config;
import win.ui.minmax;
import process.ffmpeg;
import qrencode.bitmap;
import gdip.graphics;
import gdip.bitmap;
/*
import debug;
import debug.log;
debug.log.setPath("/.config/log.txt");
debug.log.checkSize(0x20000); //设置日志大小
*/
/*DSG{{*/
mainForm = win.form(text="你的日记";right=1480;bottom=1001;edge=1;maximize=1)
mainForm.add(
port={cls="static";text="close";left=56;top=936;right=120;bottom=961;hide=1;notify=1;transparent=1;z=1}
)
/*}}*/

win.ui.minmax(mainForm,1024, 768);   // 限制宽高调整

http = web.rest.jsonLiteClient();
wb = web.view(mainForm,{
        startArguments = {
            allowFileAccessFromFiles = true;    // 允许访问本地文件
            disableWebSecurity = true;         // 禁用安全策略（开发时使用）
            remoteAllowOrigins = "*";          // 允许所有跨域请求
        };});
loginGo = "";
token = "";
uploadIP = "";
isMember = false;

NijiDocPath = io.getSpecial(0x05/*即文档文件夹*/) + "\你的日记\";

thread.invoke(function(NijiDocPath,mainForm){	//看图服务器。
	import wsock.tcp.simpleHttpServer;
	var imgServer = wsock.tcp.simpleHttpServer();
	var threadIp;
	var threadPort;
	_,mainForm.port.text = imgServer.getLocalIp();//会return ip,port两个返回值，所以用下划线占位ip。
	imgServer.documentRoot = NijiDocPath
	
	imgServer.run( 
	    function(response,request,session){ 
			//添加禁止缓存的HTTP头
			response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate";
			response.headers["Pragma"] = "no-cache";
			response.headers["Expires"] = "0";
			
	   		response.loadcode( request.path );	

	    }
	);
	
},NijiDocPath,mainForm);

uploadTmpTable = {};	//图片列表
uploadTmpNum = 1;	//缓存图片编号
uploadServer = wsock.tcp.asynHttpServer();

uploadServer.run( {

	//自定义某个路径的响应程序
	["/upload/main.aardio"] = function(response,request,session){ 
			//添加禁止缓存的HTTP头
			response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate";
			response.headers["Pragma"] = "no-cache";
			response.headers["Expires"] = "0";
			
			fileData = request.postFileData()
			//console.open()
			if(fileData){
				
				var outputDir = io.joinpath(NijiDocPath, "upload_temp");
				io.createDir(outputDir);
				
				var fileName = io.joinpath(NijiDocPath,"upload_temp",uploadTmpNum + '.jpg') 
				var image_object = gdip.bitmap(fileData.file.value());
				if(image_object){
					// 压图！防止你记服务器爆炸

					temp_buffer = image_object.saveToBuffer();
					while( #temp_buffer > 1000000){
						image_object = image_object.resize( image_object.width * 0.9, image_object.height * 0.9) ;
						temp_buffer = image_object.saveToBuffer();
					}
					image_object.save(fileName);
					response.contentType = "text/plain";
					response.write(uploadTmpNum);
					wb.invoke('addUploadPreview',uploadTmpNum);	//添加预览
					table.insert(uploadTmpTable,uploadTmpNum) ;	//添加表。用于上传。
					uploadTmpNum++ ;
				}
				else {
					response.error(err) 
				}
				

				return response.close() 
			} 		
    }
    
    ["/mobileUpload/main.aardio"] = function(response,request,session){
		//添加禁止缓存的HTTP头
		response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate";
		response.headers["Pragma"] = "no-cache";
		response.headers["Expires"] = "0";
    	
    	response.loadcode("/res/web/mobileUpload.html");
    }
    
    
    //表里找不到的路径，仍然会正常访问存在的文件（支持资源文件）	
} );
uploadIP = uploadServer.getUrl( , true);
_,uploadPort = uploadServer.getLocalIp();	//快传二维码
QRcodeURL = uploadIP + "/mobileUpload/";
QRobj = qrencode.bitmap( QRcodeURL );
QRobj.copyBitmap( 512 ).save( io.joinpath(NijiDocPath,"upload_temp","QRcode.jpg") , 512 )


zh = string.chineseNumber(); 
daytoweek = function(inputnum){
	weekDic = {"天","一","二","三","四","五","六"};
	outputweek = weekDic[inputnum + 1];
	return outputweek; 
}

addSelfCard = function(tableIndex){
	
	//检测列表是否需要添加新月份
	if(time(diaryResponse["diaries"][tableIndex]['createddate'],"%Y-%m-%d").month != nowMonth){
		diaryCreatedDate = time(diaryResponse["diaries"][tableIndex]['createddate'],"%Y-%m-%d");
		nowMonth = diaryCreatedDate.month;
		wb.invoke("addMonthText",{
		year = diaryCreatedDate.year;
		month = diaryCreatedDate.month;
		monthStr = zh.number(nowMonth) + "月";
		});
	}
	
	//创建日记列表卡片
	cardDay = time(diaryResponse["diaries"][tableIndex]['createddate'],"%Y-%m-%d").day;
	cardWeek = "星期" + daytoweek(time(diaryResponse["diaries"][tableIndex]['createddate'],"%Y-%m-%d").dayofweek);
	cardWriteTime = tostring(time(diaryResponse["diaries"][tableIndex]['ts']),"%H:%M");
	if(diaryResponse["diaries"][tableIndex]['title'] != ""){
       	cardTitle = diaryResponse["diaries"][tableIndex]['title']; 
	}
	else {
   		cardTitle = diaryResponse["diaries"][tableIndex]['createddate'];
	}
	
	//卡片上日记预览文字
	if(diaryResponse["diaries"][tableIndex]['content'] != "")
	{
	    cardSimpleStrip = string.replace(diaryResponse["diaries"][tableIndex]['content'], "\s+", " ");
	
	    if(string.len(cardSimpleStrip)>19)
   		    cardSimple = cardSimpleStrip + "…"
	    else
    	    cardSimple = cardSimpleStrip;
    }
    	
    cardStyle = 'card-self';
    	
	cardOwner = 'self';
	cardDiaryId = diaryResponse["diaries"][tableIndex]['id'];
	createdDate = diaryResponse["diaries"][tableIndex]['createddate'];
	cardReadmark = 0;
	if(diaryResponse["read_marks"][tostring(cardDiaryId)] != null)
		cardReadmark = diaryResponse["read_marks"][tostring(cardDiaryId)];

	wb.invoke("addDiaryCard",{
    	cardDay = cardDay;
    	cardWeek = cardWeek;
    	cardWriteTime = cardWriteTime;
    	cardTitle = cardTitle;
    	cardSimple = cardSimple;
    	cardStyle = cardStyle;
    	cardOwner = cardOwner;
    	cardUserID = userID;
    	cardDiaryId = cardDiaryId;
    	createdDate = createdDate;
    	cardReadmark = cardReadmark
	});
}

addPairedCard = function(tableIndex){
	
	//检测列表是否需要添加新月份
	if(time(diaryResponse["diaries_paired"][tableIndex]['createddate'],"%Y-%m-%d").month != nowMonth){
		
		diaryCreatedDate = time(diaryResponse["diaries_paired"][tableIndex]['createddate'],"%Y-%m-%d");
		nowMonth = diaryCreatedDate.month;
		wb.invoke("addMonthText",{
		year = diaryCreatedDate.year;
		month = diaryCreatedDate.month;
		monthStr = zh.number(nowMonth) + "月";
		});
	}
	
	//创建日记列表卡片
	cardDay = time(diaryResponse["diaries_paired"][tableIndex]['createddate'],"%Y-%m-%d").day;
	cardWeek = "星期" + daytoweek(time(diaryResponse["diaries_paired"][tableIndex]['createddate'],"%Y-%m-%d").dayofweek);
	cardWriteTime = tostring(time(diaryResponse["diaries_paired"][tableIndex]['ts']),"%H:%M");
	if(diaryResponse["diaries_paired"][tableIndex]['title'] != ""){
       	cardTitle = diaryResponse["diaries_paired"][tableIndex]['title']; 
	}
	else {
   		cardTitle = diaryResponse["diaries_paired"][tableIndex]['createddate'];
	}
	
	//卡片上日记预览文字
	if(diaryResponse["diaries_paired"][tableIndex]['content'] != "")
	{
	    cardSimpleStrip = string.replace(diaryResponse["diaries_paired"][tableIndex]['content'], "\s+", " ");
	
	    if(string.len(cardSimpleStrip)>19)
   		    cardSimple = cardSimpleStrip + "…"
	    else
    	    cardSimple = cardSimpleStrip;
    }
    	
    cardStyle = 'card-paired';
    	
	cardOwner = 'paired';
	cardDiaryId = diaryResponse["diaries_paired"][tableIndex]['id'];
	createdDate = diaryResponse["diaries_paired"][tableIndex]['createddate'];
	cardReadmark = 0;
	wb.invoke("addDiaryCard",{
    	cardDay = cardDay;
    	cardWeek = cardWeek;
    	cardWriteTime = cardWriteTime;
    	cardTitle = cardTitle;
    	cardSimple = cardSimple;
    	cardStyle = cardStyle;
    	cardOwner = cardOwner;
    	cardUserID = pairedID;
    	cardDiaryId = cardDiaryId;
    	createdDate = createdDate;
    	cardReadmark = cardReadmark
	});
}

v2sync = function(){
	diaryResponse = http.api("https://nideriji.cn/api/v2/sync/").post(
    		user_config_ts = 0,
    		diaries_ts = 0,
    		readmark_ts = 0,
    		images_ts = 0
    );
    
    isMember = diaryResponse["user_config"]["is_member"];
    uploadTmpTable = {};	//清空上传图片相关的缓存
	uploadTmpNum = 1;
	//因为图片下载可以开启多线程后台，所以直接先开始检测下载再处理日记卡片、日记列表。
	if(isMember){	//只为pro用户下载图片，节约服务器带宽。
	
		
		thread.invoke( 		//为自己下图
			function( diaryResponse,NijiDocPath,token,wb ){
				import web.rest.jsonLiteClient;
				http = web.rest.client();
				http.addHeaders = {
					["auth"] = "token " ++ token;
					["user-agent"] = "OhApp/3.6.12 Platform/Android";
				}
				
				userConfig = diaryResponse["user_config"];
				
				if(diaryResponse["images"] != null && table.len(diaryResponse["images"]) != 0){
					picTable = diaryResponse["images"];
					picTotal = picTable[table.len(picTable)].image_id;//通过最后一张图id判断图片总数。
					
					for(i=picTotal;1;-1){
						if(!io.exist(NijiDocPath ++ userConfig.userid ++ "\" ++ i ++ ".jpg")){
							picApi = http.api("https://f.nideriji.cn/api/image/" ++ userConfig.userid ++ "/" ++ i ++ "/");
							pic = picApi.get();
							if( pic ){//防止该图不存在，为空编号
								string.save(NijiDocPath ++ userConfig.userid ++ "\" ++ i ++ ".jpg", pic )
							}
						}	
					}
					//为前端图库添加图片
					for(i=1;picTotal;1){
						if(io.exist(NijiDocPath ++ userConfig.userid ++ "\" ++ i ++ ".jpg")){
							wb.invoke("addPicture",i);
						}	
					}
				}
				
			},diaryResponse,NijiDocPath,token,wb
		);
		
		if( diaryResponse["user_config"]["paired"] ){//下载对面图像。
			thread.invoke(
				function( diaryResponse,NijiDocPath,token ){
					import web.rest.jsonLiteClient;
					http = web.rest.client();
					http.addHeaders = {
						["auth"] = "token " ++ token;
						["user-agent"] = "OhApp/3.6.12 Platform/Android";
					}
					pairedConfig = diaryResponse["user_config"]["paired_user_config"];
					
					if(diaryResponse["images_paired"] != null && table.len(diaryResponse["images_paired"]) != 0){
						picTable = diaryResponse["images_paired"];
						picTotal = picTable[table.len(picTable)].image_id;//通过最后一张图id判断图片总数。
						
						for(i=picTotal;1;-1){
							if(!io.exist(NijiDocPath ++ pairedConfig.userid ++ "\" ++ i ++ ".jpg")){
								picApi = http.api("https://f.nideriji.cn/api/image/" ++ pairedConfig.userid ++ "/" ++ i ++ "/");
								pic = picApi.get();
								if( pic ){//防止该图不存在，为空编号
									string.save(NijiDocPath ++ pairedConfig.userid ++ "\" ++ i ++ ".jpg", pic )
								}
							}	
						}
					}
					
				},diaryResponse,NijiDocPath,token
			);
		}
	}
		
	userID = diaryResponse["user_config"]["userid"];	//因为添加日记卡片可能需要几秒钟，所以可以把快的小属性都先设置好。
	wb.invoke('setUserId' , userID);	//html方面全局变量，主要用于新建空白日记以及图片索引。匹配对象的id在下面设置。
	
	//为html传输看图端口
	if(mainForm.port.text != "close"){
		wb.invoke('setPort' , mainForm.port.text ); 
	}
	
	wb.invoke('setUploadPort', uploadPort );	
	wb.invoke('setUserColor' , diaryResponse["user_config"]["role"] , diaryResponse["user_config"]["paired_user_config"]["role"] || null);	//主题色，包括三个悬浮按钮以及简介用户名
	var pairedInfo = "";
	//————————————————————————————————只有匹配状况是情况比较多，需要专门计算一下。别的稍微链接字符串就可以加入右上角个人信息卡片
	if(diaryResponse["user_config"]["paired"]){
		if(time.now().diffday(time(diaryResponse["user_config"]["paired_user_config"]["last_login_time"])) == 0){
			if(time.now().diffhour(time(diaryResponse["user_config"]["paired_user_config"]["last_login_time"])) == 0){
				pairedInfo = "🙏 对面在" + time.now().diffminute(time(diaryResponse["user_config"]["paired_user_config"]["last_login_time"])) + "分钟前登录过~";
			}
			else {
				pairedInfo = "🙏 对面在" + time.now().diffhour(time(diaryResponse["user_config"]["paired_user_config"]["last_login_time"])) + "小时前登录过~";
			}
		}
		else {
			pairedInfo = "🙏 对面在" + time.now().diffday(time(diaryResponse["user_config"]["paired_user_config"]["last_login_time"])) + "天前登录过~";
		}
	}
	elseif(diaryResponse["user_config"]["random_pair_joined"]){
		pairedInfo = "🙏 匹配将在晚上八点完成~";
	}
	elseif(diaryResponse["user_config"]["pair_requested"]){
		pairedInfo = "🙏 你的定向请求已发出";	
	}
	else {
		pairedInfo = "🙏 你还没有加入任何配对";
	}
	//————————————————————————————————
	var nameInfo = diaryResponse["user_config"]["name"] ? diaryResponse["user_config"]["name"] : "你的名字" ;//三元运算符
	var descInfo =  diaryResponse["user_config"]["description"] ?  diaryResponse["user_config"]["description"] : "去手机端设置一条格言吧";
	
	wb.invoke('setUserInfoCard', nameInfo, "✒️ " + descInfo, pairedInfo, 
		"📝 " + diaryResponse["user_config"]["diary_count"] + "篇 | " + diaryResponse["user_config"]["word_count"] + "字 | " + diaryResponse["user_config"]["image_count"] + "图", diaryResponse["user_config"]["is_member"]);
	if(diaryResponse["user_config"]["avatar"]){
		wb.invoke("setAvatar","https://f.nideriji.cn" + diaryResponse["user_config"]["avatar"]);
	}
	
	i = 0;
	j = 0;
	iLen = diaryResponse["user_config"]["diary_count"];
	jLen = 0;
	iDate = time("1900-01-01","%Y-%m-%d");
	jDate = time("1900-01-01","%Y-%m-%d");
	nowMonth = 0;
	if(iLen){
		i = 1
		iDate = time(diaryResponse["diaries"][i]["createddate"],"%Y-%m-%d");
	}
	
	if( diaryResponse["user_config"]["paired"] ){		//防止用户未连接虫洞
		pairedConfig = diaryResponse["user_config"]["paired_user_config"]
		pairedID = pairedConfig["userid"];
		wb.invoke('setPairedId', pairedID);				//设置网页PairedId
		//wb.invoke('setPairedGender', pairedConfig["role"]);
		wb.invoke('setPairSpan', pairedConfig["role"], pairedConfig["name"]);
		jLen = table.len(diaryResponse["diaries_paired"])
		if(jLen){
			j = 1
			jDate = time(diaryResponse["diaries_paired"][j]["createddate"],"%Y-%m-%d");	
		}
		
	}
	
	while(i <= iLen && iLen){
		addSelfCard(i);
		i++;
	}
	while(j <= jLen && jLen){
		addPairedCard(j);
		j++;
	}
	
}

wb.external = {
	login = function(email,password,remPw){
		loginResponse = http.api("https://nideriji.cn/api/login/").post(
			email = email,
			password = password
		);
		token = loginResponse.token;
		
		if(!loginResponse){
			wb.doScript('document.getElementById("wrong-tip").hidden = false;');
		}
		elseif(loginResponse["error"] != 0) {
			wb.doScript('document.getElementById("wrong-tip").hidden = false;');
		}
		else{
			/*用于在开发阶段获取自己的token
			console.log(loginResponse.token)
			//*/
			
			loginGo = 1;
			http.addHeaders = {
				["auth"] = "token " ++ loginResponse.token;
    			["user-agent"] = "OhApp/3.6.12 Platform/Android";
    		}
    		if(remPw){
    		    cfg.token.token = loginResponse.token;
    		}
		}	
	};	
	
	logout = function(){
		loginGo = 2
		cfg.token.token = ""
	}
	
	loadPage = function(){
		v2sync();
	}
	
	
	msgbox = function(msg){
		mainForm.msgbox(msg);
	}
	

	writeDiary = function(dateText,titleText,contentText){
		saveResponse = http.api("https://nideriji.cn/api/write/").post(
			title = titleText,
			content = contentText,
			date = dateText
		);
		
		var returnTable = {
			status = "",
			newDiaryId = "",
			createdDate = "",
			}
			
		if(saveResponse){
			returnTable.status = "Success";
			returnTable.newDiaryId = saveResponse["diary"]["id"];
			returnTable.createdDate = saveResponse["diary"]["createddate"];
			
			return web.json.stringify( returnTable ); 
		}
		else {
			returnTable.status = "error"; 
			return web.json.stringify( returnTable );
		}
	}
	
	deleteDiary = function(userID,diaryID){
		delResponse = http.api("https://nideriji.cn/api/diary/delete/"++ diaryID ++ "/").get();
		if(delResponse["error"] != null ? delResponse["error"] == 0 : false/* 若不存在delR则直接报错 */){
			return "Success"; 	
		}
		else {
			return "error"; 
		}
	}
	
	getDiary = function(ownerID,diaryID){
		getAllResponse = http.api("https://nideriji.cn/api/diary/all_by_ids/" ++ ownerID ++ "/").post(
			diary_ids = diaryID
		);
		if(getAllResponse["diaries"][1]){
			http.api("https://nideriji.cn/api/update_read_mark/" ++ diaryID ++ "/").get();
			return web.json.stringify(getAllResponse["diaries"][1],true);
		}
		else {
			return "error";
		} 
		
	}
	
	uploadImage = function(/* 自动读取UploadTmpTable以及upload_temp下文件，所以无需参数 */){
		
		if(!isMember){
			mainForm.msgbox("请开通会员后使用图片功能！");
			return 0; 
		}
		
		for(k,v in uploadTmpTable){
			uploadApi = http.api("https://f.nideriji.cn/api/upload_image/");
			uploadResponse = uploadApi.sendMultipartForm( { 
				image = "@" + NijiDocPath + "\upload_temp\" + v + ".jpg";
			});
			if(uploadResponse["error"] != null){
				if(uploadResponse["error"] == 0){
					newPicId = uploadResponse["image_id"];
					if(!io.exist(io.joinpath( NijiDocPath , userID )))
						io.createDir(io.joinpath(NijiDocPath,userID));
					fsys.move(io.joinpath(NijiDocPath,"upload_temp", v + ".jpg"),io.joinpath(NijiDocPath,userID,newPicId + ".jpg"));
					wb.invoke("addPicture",newPicId);
					wb.invoke("delUploadPreview",v);
				}
				else {
					wb.invoke("alert","上传出错！");
				}
				
			}
		}
		
		uploadTmpTable = {};//重置初始化。
		uploadTmpNum = 1;
	}
	
	removePreview = function(previewNum){
		previewNum = tonumber(previewNum);
		
		table.removeByValue(uploadTmpTable,previewNum);
		io.remove(io.joinpath(NijiDocPath,"upload_temp", previewNum + ".jpg"));
		
	}
	
	unpair = function(){
		var unpairResp = http.api("https://nideriji.cn/api/unpair/").get();
		if(unpairResp["error"] != null){
			if(unpairResp["error"] == 0 ){
				return "success"; 	
			}
		}
		return "error"; 
	}
	
	joinRandomPair = function(){
		var joinResp = http.api("https://nideriji.cn/api/join_random_pair/").get();
		if(joinResp["error"] != null){
			if(joinResp["error"] == 0 ){
				return "success"; 	
			}
		}
		return "error"; 
	}
	
	cancelRandomPair = function(){
		var cancelResp = http.api("https://nideriji.cn/api/cancel_random_pair/").get();
		if(cancelResp["error"] != null){
			if(cancelResp["error"] == 0 ){
				return "success"; 	
			}
		}
		return "error"; 
	}
	
	knowYourName = function(){
		var knowResp = http.api("https://nideriji.cn/api/know_your_name/").get();
		if(knowResp["error"] != null){
			if(knowResp["error"] == 0 ){
				return "success"; 	
			}
		}
		return "error"; 
	}
	
	
	directPair = function(targetEmail){
		var dircResp = http.api("https://nideriji.cn/api/pair/").post(
			target_email = targetEmail
		)
		if(dircResp["error"] != null){
			if(dircResp["error"] == 0 ){
				if(dircResp["paired"]){
					return "paired"; 
				}
				else{
					return "waiting"; 
				}
			}
		}
		return "error"; 
	}
	
	
};//wb.external结束


loginIntvalID = mainForm.setInterval( 
	function(){
		if(loginGo == 1){
			wb.go("/res/web/index.html");
			loginGo = 0;
		}
		elseif (loginGo == 2)  {
			wb.go("/res/web/login.html");
			loginGo = 0;
		}
		
	},200
)



mainForm.onClose = function(hwnd,message,wParam,lParam){
    if(wb.xcall('hasUnsavedChanges')){
    	if(!mainForm.msgboxTest("当前日记有未保存内容，是否确认关闭窗口？"))
    		return "不关不关就不关";    
    }
}


wb.go("/res/web/login.html");
wb.focus();
mainForm.show();

//自动登录组件
cfgPath = io.appData("/nideriji");
cfg = fsys.config(cfgPath)	//创建config对象

if(table.count(cfg.token) == 2){			//第一个token是文件名，第二个token是字段名。空的config文件count为1
	if(cfg.token.token != ""){
		token = cfg.token.token ;
		http.addHeaders = {
			["auth"] = "token " + cfg.token.token ;
			["user-agent"] = "OhApp/3.6.12 Platform/Android";
		}
		testToken = http.api("https://nideriji.cn/api/v2/sync/").post();
		if(testToken){
			loginGo = 1;	
		}
		else {
			cfg.token.token = "";
			mainForm.msgbox("先前保存的登录凭据已失效");
		}
	}
}

//*
versionObj = fsys.version.getInfo(io._exepath);		//版本更新相关
currentVersion = string.join({versionObj.productVersion.major; versionObj.productVersion.minor; versionObj.productVersion.build;}, ".")
newVersion = http.api("http://frp-fit.com:57258/").get();
if(newVersion && newVersion > currentVersion ){
	var versionForm = mainForm.loadForm("\res\newVersion.aardio");
	versionForm.edit.text = "检测到你的日记PC版有更新，最新版为：" + newVersion ++ '\r\n' ++ "下载链接：https://aztand.lanzoub.com/b00wsr3wd 密码：nideriji";
	versionForm.show();
}
//*/


return win.loopMessage();